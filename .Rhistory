step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_select(-datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
prepped <- prep(bike_recipe)
# define a model
poisson_model <- poisson_reg() %>% # Type of model
set_engine("glm") %>% # Engine = What R function to use
set_mode("regression")
prepped
prepped <- prep(bike_recipe)
# define a model
poisson_model <- poisson_reg() %>% # Type of model
set_engine("glm") %>% # Engine = What R function to use
set_mode("regression")
# penalized linear regression model
preg_model <- linear_reg(penalty=3, mixture=0.5) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# read in test data
test_data <- vroom("files/test.csv")
test_data$season <- as.factor(test_data$season)
test_data$weather <- as.factor(test_data$weather)
# run all the steps on test data
penalized_preds <- predict(preg_wf, new_data=test_data)
train_data <- vroom("files/train.csv", ) # read in data
# remove registered and casual columns, change count to log(count)
train_data <- train_data %>%
select(-registered, -casual)
# write recipe for data wrangling
bike_recipe = recipe(count ~ ., data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(workingday = as.factor(workingday)) %>%
step_mutate(holiday = as.factor(holiday)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_select(-datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
prepped <- prep(bike_recipe)
# penalized linear regression model
preg_model <- linear_reg(penalty=3, mixture=0.5) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# read in test data
test_data <- vroom("files/test.csv")
# run all the steps on test data
penalized_preds <- predict(preg_wf, new_data=test_data)
train_data <- vroom("files/train.csv", ) # read in data
# remove registered and casual columns, change count to log(count)
train_data <- train_data %>%
select(-registered, -casual)
# write recipe for data wrangling
bike_recipe = recipe(count ~ ., data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(workingday = as.factor(workingday)) %>%
step_mutate(holiday = as.factor(holiday)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_select(-datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
prepped <- prep(bike_recipe)
bake(prepped, new_data=train_data)
# penalized linear regression model
preg_model <- linear_reg(penalty=3, mixture=0.5) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# read in test data
test_data <- vroom("files/test.csv")
# run all the steps on test data
penalized_preds <- predict(preg_wf, new_data=test_data)
train_data <- vroom("files/train.csv", ) # read in data
library(tidyverse)
library(tidymodels)
library(vroom)
library(skimr)
library(GGally)
library(ggplot2)
library(glmnet)
train_data <- vroom("files/train.csv", ) # read in data
# remove registered and casual columns, change count to log(count)
train_data <- train_data %>%
select(-registered, -casual)
# write recipe for data wrangling
bike_recipe = recipe(count ~ ., data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(workingday = as.factor(workingday)) %>%
step_mutate(holiday = as.factor(holiday)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_select(-datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
# penalized linear regression model
preg_model <- linear_reg(penalty=3, mixture=0.5) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# read in test data
test_data <- vroom("files/test.csv")
# run all the steps on test data
penalized_preds <- predict(preg_wf, new_data=test_data)
rlang::last_trace()
# write recipe for data wrangling
bike_recipe = recipe(count ~ ., data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(workingday = as.factor(workingday)) %>%
step_mutate(holiday = as.factor(holiday)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
# penalized linear regression model
preg_model <- linear_reg(penalty=3, mixture=0.5) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# read in test data
test_data <- vroom("files/test.csv")
# run all the steps on test data
penalized_preds <- predict(preg_wf, new_data=test_data)
train_data <- vroom("files/train.csv", ) # read in data
# remove registered and casual columns, change count to log(count)
train_data <- train_data %>%
select(-registered, -casual)
# write recipe for data wrangling
bike_recipe = recipe(count ~ ., data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(workingday = as.factor(workingday)) %>%
step_mutate(holiday = as.factor(holiday)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
# penalized linear regression model
preg_model <- linear_reg(penalty=3, mixture=0.5) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# read in test data
test_data <- vroom("files/test.csv")
# run all the steps on test data
penalized_preds <- predict(preg_wf, new_data=test_data)
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
bike_recipe2 <- recipe(count ~ ., data = train_data) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_nominal_predictors())
prepped <- prep(bike_recipe)
# bake(prepped, new_data=train_data)
# define a model
poisson_model <- poisson_reg() %>% # Type of model
set_engine("glm") %>% # Engine = What R function to use
set_mode("regression")
# penalized linear regression model
preg_model <- linear_reg(penalty=3, mixture=0.5) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# write recipe for data wrangling
bike_recipe = recipe(count ~ ., data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(workingday = as.factor(workingday)) %>%
step_mutate(holiday = as.factor(holiday)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_select(-datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
prepped <- prep(bike_recipe)
# penalized linear regression model
preg_model <- linear_reg(penalty=3, mixture=0.5) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# run all the steps on test data
penalized_preds <- predict(preg_wf, new_data=test_data)
rlang::last_trace()
bike_recipe2 <- recipe(count ~ ., data = train_data) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_nominal_predictors())
prepped2 <- prep(bike_recipe2)
preg_wf <- workflow() %>%
add_recipe(bike_recipe2) %>%
add_model(preg_model) %>%
fit(data=train_data)
library(tidyverse)
library(tidymodels)
library(vroom)
library(skimr)
library(GGally)
library(ggplot2)
library(glmnet)
# read in data
train_data <- vroom("files/train.csv")
test_data <- vroom("files/test.csv")
test_data
train_data
train_data <- train_data %>%
select(-registered, -casual)
# write recipe for data wrangling
bike_recipe <- recipe(count ~ ., data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(workingday = as.factor(workingday)) %>%
step_mutate(holiday = as.factor(holiday)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
prepped <- prep(bike_recipe)
prepped
bake(prepped, new_data=train_data)
# define the model
preg_model <- linear_reg(penalty=3, mixture=0.5) %>%
set_engine("glmnet")
# write recipe
bike_recipe <- recipe(count ~ ., data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(workingday = as.factor(workingday)) %>%
step_mutate(holiday = as.factor(holiday)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
prep()
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# write recipe
bike_recipe <- recipe(count ~ ., data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(workingday = as.factor(workingday)) %>%
step_mutate(holiday = as.factor(holiday)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# write recipe
bike_recipe <- recipe(count ~ ., data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(workingday = as.factor(workingday)) %>%
step_mutate(holiday = as.factor(holiday)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
stem_rm(datetime)
# write recipe
bike_recipe <- recipe(count ~ ., data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(workingday = as.factor(workingday)) %>%
step_mutate(holiday = as.factor(holiday)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(datetime_hour = as.factor(datetime_hour)) %>%
step_date(datetime, features = "month") %>%
step_mutate(datetime_month = as.factor(datetime_month)) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
# define the model
preg_model <- linear_reg(penalty=3, mixture=0.5) %>%
set_engine("glmnet")
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# calculate predictions
penalized_preds <- predict(preg_wf, new_data=test_data)
# format for Kaggle and save csv
kaggle_submission <- penalized_preds %>%
bind_cols(., test_data) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PenalizedPreds.csv", delim=",")
# define the model
preg_model <- linear_reg(penalty=2, mixture=0.5) %>%
set_engine("glmnet")
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# calculate predictions
penalized_preds <- predict(preg_wf, new_data=test_data)
# format for Kaggle and save csv
kaggle_submission <- penalized_preds %>%
bind_cols(., test_data) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PenalizedPreds.csv", delim=",")
# define the model
preg_model <- linear_reg(penalty=9, mixture=0.25) %>%
set_engine("glmnet")
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# calculate predictions
penalized_preds <- predict(preg_wf, new_data=test_data)
# format for Kaggle and save csv
kaggle_submission <- penalized_preds %>%
bind_cols(., test_data) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PenalizedPreds.csv", delim=",")
# define the model
preg_model <- linear_reg(penalty=9, mixture=1) %>%
set_engine("glmnet")
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# calculate predictions
penalized_preds <- predict(preg_wf, new_data=test_data)
# format for Kaggle and save csv
kaggle_submission <- penalized_preds %>%
bind_cols(., test_data) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PenalizedPreds.csv", delim=",")
# define the model
preg_model <- linear_reg(penalty=9, mixture=0.1) %>%
set_engine("glmnet")
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# calculate predictions
penalized_preds <- predict(preg_wf, new_data=test_data)
# format for Kaggle and save csv
kaggle_submission <- penalized_preds %>%
bind_cols(., test_data) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PenalizedPreds.csv", delim=",")
# define the model
preg_model <- linear_reg(penalty=7, mixture=0.1) %>%
set_engine("glmnet")
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# calculate predictions
penalized_preds <- predict(preg_wf, new_data=test_data)
# format for Kaggle and save csv
kaggle_submission <- penalized_preds %>%
bind_cols(., test_data) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PenalizedPreds.csv", delim=",")
# define the model
preg_model <- linear_reg(penalty=0, mixture=1) %>%
set_engine("glmnet")
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# calculate predictions
penalized_preds <- predict(preg_wf, new_data=test_data)
# format for Kaggle and save csv
kaggle_submission <- penalized_preds %>%
bind_cols(., test_data) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PenalizedPreds.csv", delim=",")
# define the model
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# calculate predictions
penalized_preds <- predict(preg_wf, new_data=test_data)
# format for Kaggle and save csv
kaggle_submission <- penalized_preds %>%
bind_cols(., test_data) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PenalizedPreds.csv", delim=",")
# define the model
preg_model <- linear_reg(penalty=5, mixture=0) %>%
set_engine("glmnet")
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# calculate predictions
penalized_preds <- predict(preg_wf, new_data=test_data)
# format for Kaggle and save csv
kaggle_submission <- penalized_preds %>%
bind_cols(., test_data) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PenalizedPreds.csv", delim=",")
# define the model
preg_model <- linear_reg(penalty=5, mixture=0.25) %>%
set_engine("glmnet")
# create a workflow
preg_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=train_data)
# calculate predictions
penalized_preds <- predict(preg_wf, new_data=test_data)
# format for Kaggle and save csv
kaggle_submission <- penalized_preds %>%
bind_cols(., test_data) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PenalizedPreds.csv", delim=",")
